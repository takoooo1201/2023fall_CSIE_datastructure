#include<bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

TreeNode* buildCompleteTree(const std::vector<int>& values) {
    if (values.empty()) return nullptr;

    TreeNode* root = new TreeNode(values[0]);
    std::queue<TreeNode*> nodeQueue;
    nodeQueue.push(root);

    for (int i = 1; i < values.size(); ++i) {
        TreeNode* current = nodeQueue.front();
        nodeQueue.pop();

        if (values[i] != -1) {
            current->left = new TreeNode(values[i]);
            nodeQueue.push(current->left);
        }

        ++i;
        if (i < values.size() && values[i] != -1) {
            current->right = new TreeNode(values[i]);
            nodeQueue.push(current->right);
        }
    }

    return root;
}
//reverse
void reverse(TreeNode* root) {
    if (root == nullptr) return;

    TreeNode* tp =root->right;
    root->right=root->left;
    root->left=tp;
    
    reverse(root->right);
    reverse(root->left);
    return;
}
//find
TreeNode* findNode(TreeNode* root, int num) {
    if (root == nullptr || root->val == num) {
        return root;
    }

    TreeNode* leftResult = findNode(root->left, num);
    if (leftResult != nullptr) {
        return leftResult;
    }

    return findNode(root->right, num);
}

// Function to print inorder traversal of the tree (for verification)
void inorderTraversal(TreeNode* root) {
    if (root) {
        inorderTraversal(root->left);
        std::cout << root->val << " ";
        inorderTraversal(root->right);
    }
}
// Function to print level order traversal of the tree
void levelOrderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    std::queue<TreeNode*> nodeQueue;
    nodeQueue.push(root);

    while (!nodeQueue.empty()) {
        TreeNode* current = nodeQueue.front();
        nodeQueue.pop();

        std::cout << current->val << " ";

        if (current->left != nullptr) {
            nodeQueue.push(current->left);
        }

        if (current->right != nullptr) {
            nodeQueue.push(current->right);
        }
    }
}

int main() {
	std::string input;
    //std::cout << "Enter space-separated values: ";
    getline(std::cin, input);
    istringstream iss(input);
    vector<int> levelOrderValues ;

    int number;
    while (iss >> number) {
        levelOrderValues.push_back(number);
    }
    TreeNode* root = buildCompleteTree(levelOrderValues);
    int n;
    while(cin>>n&&n!=0){
    	TreeNode* a =findNode(root,n);
    	reverse(a);
	}
    //std::vector<int> levelOrderValues = {4 ,2 ,7 ,1 ,3 ,6 ,9 ,5 ,8 ,10 ,11 ,12 ,13 ,14 ,15};

    // Verify the tree by printing inorder traversal
    //inorderTraversal(root);
    //TreeNode* a =findNode(root,7);
    //inorderTraversal(a);
    //reverse(a);
	//inorderTraversal(a);
	levelOrderTraversal(root);
    return 0;
}
